---
description: 
globs: 
alwaysApply: false
---
# 后台编程文档头部规范

## 基本格式
```yaml
---
title: 功能名-简短描述
category:
  - 编程语言
  - 功能分类
tag:
  - 功能名
  - 相关特性
  - 应用场景
---
```

## 规则详解

### 1. 文件头部必须使用 YAML 格式的前置元数据
- 使用三个连字符 `---` 作为开始和结束标记
- 内容必须是有效的 YAML 格式

### 2. title 字段规范
- 格式为：`功能名-简短描述`
- 功能名使用小写
- 简短描述应明确表达功能的主要用途
- 示例：`Optional-处理空值的容器类`

### 3. category 字段规范
- 必须包含数组格式的分类
- 第一级分类通常为编程语言，如 `Java`、`Python`、`Go` 等
- 第二级分类根据功能类型，如 `核心特性`、`并发编程`、`函数式编程`、`数据处理` 等
- 使用缩进表示层级关系

### 4. tag 字段规范
- 必须包含数组格式的标签
- 第一个标签通常是功能名本身
- 其他标签应包括功能的主要特性和应用场景
- 每个功能至少包含 3 个相关标签
- 标签使用小写，多个词用连字符连接

### 5. 不使用 icon 字段
- 为保持一致性，不使用 icon 字段

### 6. 文档标题
- 在前置元数据后，使用一级标题 `#` 重复功能名及描述
- 标题内容应与 title 字段保持一致

## 示例

```yaml
---
title: optional-处理空值的容器类
category:
  - Java
  - 核心特性
tag:
  - optional
  - 空值处理
  - 函数式编程
---

# Optional-处理空值的容器类
```

## 分类参考

### 编程语言分类
- Java: `Java`
- Python: `Python`
- Go: `Go`
- JavaScript: `JavaScript`
- TypeScript: `TypeScript`

### 功能分类
- 核心特性: `核心特性`
- 并发编程: `并发编程`
- 函数式编程: `函数式编程`
- 数据处理: `数据处理`
- 流处理: `流处理`
- API设计: `API设计`
- 设计模式: `设计模式`
- 性能优化: `性能优化`
- 测试: `测试`
- 框架使用: `框架使用`

## 标签参考

标签应具体描述功能的特性和应用场景，例如：
- `函数式编程`
- `流式处理`
- `并发控制`
- `异步编程`
- `空值处理`
- `数据转换`
- `性能优化`
- `代码简化`
- `设计模式`
- `API设计`

遵循这些规则将确保文档的一致性和可维护性，同时提高用户的阅读体验。 